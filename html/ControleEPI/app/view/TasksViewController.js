/*
 * File: app/view/TasksViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TaskList.view.TasksViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tasks',

    showView: function(view) {
        var layout = this.getReferences().display.getLayout();
        layout.setActiveItem(this.lookupReference(view));
    },

    select: function(rowmodel, record, index, eOpts) {
        // Set selected record
        this.getViewModel().set('record', record);

        // Show details
        this.showView('details');
    },

    onComboboxSelect: function(combo, record, eOpts) {

        var formColab = Ext.getCmp('formColab');
        var form = Ext.getCmp('form');

        var txtID = Ext.ComponentQuery.query('textfield#textfieldId')[0];
        var txtRE = Ext.ComponentQuery.query('textfield#textfieldRE')[0];
        var txtCargo = Ext.ComponentQuery.query('textfield#textfieldCargo')[0];
        var txtSetor = Ext.ComponentQuery.query('textfield#textfieldSetor')[0];
        var txtEPI = Ext.ComponentQuery.query('textfield#textfieldEPI')[0];
        var txtData = Ext.ComponentQuery.query('textfield#textfieldData')[0];
        var txtResponsavel = Ext.ComponentQuery.query('textfield#textfieldResponsavel')[0];


        if(txtID.getValue() !== ''){
            console.log('editar');
            txtRE.setValue(record.data.RE);
            txtCargo.setValue(record.data.Cargo);
            txtSetor.setValue(record.data.Setor);
        } else{
            console.log('novo');
            txtID.setValue('');
            txtRE.setValue(record.data.RE);
            txtCargo.setValue(record.data.Cargo);
            txtSetor.setValue(record.data.Setor);
        }


        txtEPI.focus(true, 100);


    },

    save: function(button, e, eOpts) {
        var form = this.getReferences().form.getForm(),
            record = form.getRecord(),
            values = form.getValues(),
            grid = Ext.ComponentQuery.query('grid')[0],
            store = grid.getStore();

        var checkVerificado = Ext.ComponentQuery.query('checkbox#checkVerificado')[0];

        console.log(record);

        if (record) {
            console.log('Salvar Editado');
            record.set(values);
            record.set('verificado', checkVerificado.getValue());

        } else {

            console.log('Salvar Novo');
            var novousuario = Ext.create('TaskList.model.ControleEPI', {
                id: values.id,
                RE: values.RE,
                Colaborador: values.Colaborador,
                Cargo: values.Cargo,
                Setor: values.Setor,
                EPI: values.EPI,
                Data: values.Data,
                Responsavel: values.Responsavel,
                verificado: values.verificado
            });

            store.add(novousuario);

        }
        store.sync();
        store.removeAll();
        form.reset();
        Ext.Msg.alert('Salvar', 'Salvo Com Sucesso!', function(btn){
            if(btn == 'ok'){
                store.load();
            }
        });

        this.showView('selectMessage');
    },

    cancelEdit: function(button, e, eOpts) {
        // Show details
        this.showView('details');
    },

    add: function(button, e, eOpts) {
        var formPanel = this.getReferences().form;
        form = formPanel.getForm();

        // Clear form
        form.reset();

        // Set record
        //form.loadRecord(Ext.create('TaskList.model.ControleEPI'));

        // Set title
        formPanel.setTitle('Adicionar ao Controle de EPI');

        // Show form
        this.showView('form');

    },

    edit: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            record = this.getViewModel().get('record');

        form.reset();

        // Load record model into form
        form.loadRecord(record);

        // Set title
        formPanel.setTitle('Editar Registro');

        // Show form
        this.showView('form');
    },

    remove: function(button, e, eOpts) {
        var me = this;

        var formPanel = this.getReferences().form,
            form = formPanel.getForm();

        // Ask user to confirm this action
        Ext.Msg.confirm('Confirma Exclus√£o?', 'Tem certeza que deseja apagar este item?', function(result) {

            // User confirmed yes
            if (result == 'yes') {

                var record = me.getViewModel().get('record'),
                    store = me.getStore('controleEPIs');

                // Delete record from store
                store.remove(record);
                form.reset();
                store.sync();

                // Hide display
                me.showView('selectMessage');

            }

        });
    },

    onButtonClick: function(button, e, eOpts) {
        Ext.create('TaskList.view.LoginForm');
    }

});
